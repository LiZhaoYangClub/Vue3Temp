{
  "compilerOptions": {
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    // 解析非相对模块名的基准目录
    "baseUrl": ".",
    "esModuleInterop": true,
    "target": "esnext",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ESNext", "DOM", "DOM.Iterable", "ScriptHost"],
    "skipLibCheck": true,

    /* Bundler mode */
    // 决定如何处理模块。可选值为 "none", "commonjs", "amd", "system", "umd", "es2015", or "ESNext"。
    "moduleResolution": "node",
    // 从 tslib 导入辅助工具函数（比如 __extends， __rest等）
    "importHelpers": true,
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",

    /* Linting */
    "strict": true,
    // 生成相应的 .map文件。
    "sourceMap": true,
    // 在表达式和声明上有隐含的any类型时报错。
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    // 模块名到基于 baseUrl的路径映射的列表。
    "paths": {
      "@/*": ["src/*"],
      "#/*": ["types/*"]
    },
    // 要包含的类型声明文件名列表
    "types": ["node", "vite/client", "element-plus/global"],
    "typeRoots": ["./node_modules/@types", "./src/types"]
  },
  "include": [
    "build/**/*.ts",
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/*.d.ts",
    "vite.config.ts",
  ],
  "exclude": ["dist", "**/*.js", "node_modules"]
}
